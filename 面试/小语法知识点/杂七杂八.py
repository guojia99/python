# 将二维列表 [[0.468,0.975,0.446],[0.718,0.826,0.359]] 写成名为 csv_data 的 csv 格式的文件，并尝试用 excel 打开它。
# 从 csv_data.csv 文件中读出二维列表。
# 向 csv_data.csv 文件追加二维列表 [[1.468,1.975,1.446],[1.718,1.826,1.359]]，然后读出所有数据。
# 交换变量 x 和 y 的值。
# 判断给定的参数 x 是否是整形。
# 判断给定的参数 x 是否为列表或元组。
# 判断 ‘https://blog.csdn.net’ 是否以 ‘http://’ 或 ‘https://’ 开头。若是，则返回 ‘http’ 或 ‘https’；否则，返回None。
# 判断 ‘https://blog.csdn.net’ 是否以 ‘.com’ 或 ‘.net’ 结束。若是，则返回 ‘com’ 或 ‘net’；否则，返回None。
# 将列表 [3,‘a’,5.2,4,{},9,[]] 中 大于3的整数或浮点数置为1，其余置为0。
# a,b 是两个数字，返回其中较小者或最大者。
# 找到列表 [8,5,2,4,3,6,5,5,1,4,5] 中出现最频繁的数字以及出现的次数。
# 将二维列表 [[1], [‘a’,‘b’], [2.3, 4.5, 6.7]] 转为 一维列表。
# 将等长的键列表和值列表转为字典。
# 使用链状比较操作符重写逻辑表达式 a > 10 and a < 20。
# 写一个函数，以0.1秒的间隔不换行打印30次由函数参数传入的字符，实现类似打字机的效果。
# 数字列表求和。
# 返回数字列表中的最大值和最小值。
# 计算 5 的 3.5 方和 3 的立方根。
# 对 3.1415926 四舍五入，保留小数点后5位。
# 判断两个对象是在内存中是否是同一个。
# 返回给定对象的属性和方法。
# 计算字符串表达式 ‘(2+3)*5’ 的值。
# 实现字符串 ‘x={“name”:“David”, “age”:18}’ 包含的代码功能。
# 使用 map 函数求列表 [2,3,4,5] 中每个元素的立方根。
# 使用 sys.stdin.readline() 写一个和 input() 函数功能完全相同的函数。
# 使用二维列表描述9x9围棋局面，'w’表示白色棋子，‘b’表示黑色棋子，’-'表示无子，打印成下图左所示的文本棋盘。
# 对于9x9围棋盘，用a-i标识各行，用1-9标识各列，设计函数go()，输入位置和颜色，即输出文本棋盘，模拟围棋对弈的过程。